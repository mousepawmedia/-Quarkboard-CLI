[build-system]
requires = ["setuptools>40.8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quarkboard"
version = "0.0.1"
description = "An issue tracker that just works. Kinda like physics."
readme = "README.md"
requires-python = ">=3.11, <4"
license = {file = "LICENSE"}
authors = [
    {name = "Jason C. McDonald", email = "codemouse92@outlook.com"}
]
maintainers = []
keywords = ["utility", "development", "issue tracker", "agile", "scrum", "quantified tasks"]
dependencies = [
    "appdirs >=1.4.4, <1.5",
    "click >=8.1.7, <8.2",
    "rich >=13.5.2, <13.6",
    "SQLAlchemy >=2.0.20, <2.1"
]

[project.optional-dependencies]
dev = [
    "black",
    "branch-detective",
    "coverage",
    "commitizen",
    "mypy",
    "ruff",
    "tox",
    "ward"
]
docs = ["sphinx"]

[project.urls]
homepage = "https://quantifiedtasks.org"
repository = "https://gitlab.com/quantifiedtasks/quarkboard-cli"

[project.scripts]
quarkboard = "quarkboard.__main__:cli"

[tool.black]
line-length = 88
target-versions = ["py311"]

[tool.coverage.run]
branch = true
command_line = "-m ward"
source = [
    "quarkboard",
]
omit = [
    "__main__.py"
]

[tool.coverage.paths]
source = [
    "src/quarkboard",
    "**/site-packages/quarkboard"
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
    "pyproject.toml:version",
    "setup.cfg:^version",
]

[tool.mypy]
python_version = "3.11"
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
implicit_optional = false
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
show_error_context = true
show_column_numbers = true
pretty = true
color_output = true
error_summary = true
show_absolute_path = true

[[tool.mypy.overrides]]
module = [
    "click"
]
ignore_missing_imports = true

[tool.ruff]
select = [  # see https://beta.ruff.rs/docs/rules/
    "A",  # flake8-builtins
    "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe complexity
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",  # pycodestyle errors
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "F",  # pyflakes
    "FBT",  # flake8-boolean-trap
    "FLY",  # flynt
    "I",  # isort
    "INP",  # flake8-no-pep420
    "PERF",  # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PTH",  # flake8-use-pathlib
    "Q",  # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "RUF",  # ruff-specific rules
    "S",  # bandit
    "SIM",  # flake8-simplify
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "W"  # pycodestyle warnings
]
ignore = [
    "D401",
    "S311",
]
fixable = ["ALL"]
unfixable = []
line-length = 120
target-version = "py311"
extend-exclude = [
    ".gitvenv",
    ".ruff_cache",
    ".idea",
    ".tox",
    ".venv",
    "build",
    "dist",
    "docs",
    "tests",
    "venv"
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4.0
env_list =
    py311
    lint

[testenv:lint]
deps = .[dev]
commands =
    black --check .
    ruff .
    mypy src

[testenv:test]
deps = .[dev]
commands =
    coverage run
"""

[tool.ward]
path = ["tests"]
capture-output = false
order = "random"
fail-limit = 20
progress-style = ["bar"]